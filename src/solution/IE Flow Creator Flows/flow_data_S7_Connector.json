[
    {
        "id": "36f57d21.a8d9a2",
        "type": "tab",
        "label": "Data Collection",
        "disabled": false,
        "info": "msgoutput={}\nmsgoutput.measurement = msg.topic.split('/').pop;\nmsgoutput.payload = {\n    serverTimestamp: msg.payload.ts.toISOString(),\n    value: Math.round(msg.payload.val * 1e2)/ 1e2,\n    name: msgoutput.measurement,\n}\n\nreturn msgoutput;"
    },
    {
        "id": "9c7c99c7.995708",
        "type": "tab",
        "label": "KPI-Calc-Dummy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e4c3246f.202c48",
        "type": "tab",
        "label": "KPI Estimation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ab7e97a.bda1e7",
        "type": "mqtt-broker",
        "name": "Databus",
        "broker": "ie-databus",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3e6912e1.eda84e",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "edgedb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "32085e1e.4b1322",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "IE Flow Creator Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "10fe46ae.b68fd9",
        "type": "comment",
        "z": "9c7c99c7.995708",
        "name": "Calculate Total Power Consumption",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "93389a3e.b17868",
        "type": "function",
        "z": "9c7c99c7.995708",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive1 where \"+a+\"='powerdrive1'\"\nreturn msg; \n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "a80ca002.b35a6"
            ]
        ]
    },
    {
        "id": "c3f28480.a44118",
        "type": "function",
        "z": "9c7c99c7.995708",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive2 where \"+a+\"='powerdrive2'\"\nreturn msg; \n\n\n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "be705ddd.b666"
            ]
        ]
    },
    {
        "id": "be705ddd.b666",
        "type": "influxdb in",
        "z": "9c7c99c7.995708",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power2",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "76a37216.cc87cc"
            ]
        ]
    },
    {
        "id": "76a37216.cc87cc",
        "type": "function",
        "z": "9c7c99c7.995708",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nswitch (msg.payload[msg.payload.length-1].name) \n{\n    case \"powerdrive1\":\n        context.data.power1 = msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    case \"powerdrive2\":\n        context.data.power2= msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    default:\n        msg = null;\n    \tbreak;\n}\n\nif(context.data.power1 !== null && context.data.power2 !== null) \n{\n\tmsg2 = {};\n    msg2 = context.data;\n\n    context.data=null;\n\treturn msg2;\n} \nelse\n{\n    \n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "ef3ce0e.6ebb42",
                "36e28791.7a5b68"
            ]
        ]
    },
    {
        "id": "98f234a0.aa0bf8",
        "type": "function",
        "z": "9c7c99c7.995708",
        "name": "join_and_write_power_Influxdb",
        "func": "total = msg.payload;\n\n\n    Beta = [{\n        measurement: \"GEN_KPI_TotalPower\",\n        fields:{\n            name: \"TotalPower\",\n            value:total,\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "f049a804.258328",
                "31d373bf.d2b08c"
            ]
        ]
    },
    {
        "id": "31d373bf.d2b08c",
        "type": "influxdb batch",
        "z": "9c7c99c7.995708",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "x": 1520,
        "y": 180,
        "wires": []
    },
    {
        "id": "a80ca002.b35a6",
        "type": "influxdb in",
        "z": "9c7c99c7.995708",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "76a37216.cc87cc"
            ]
        ]
    },
    {
        "id": "fcb0f940.8676b8",
        "type": "link in",
        "z": "9c7c99c7.995708",
        "name": "",
        "links": [
            "36f30d2b.de5d52"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "93389a3e.b17868",
                "c3f28480.a44118"
            ]
        ]
    },
    {
        "id": "ef3ce0e.6ebb42",
        "type": "function",
        "z": "9c7c99c7.995708",
        "name": "sum_total_power",
        "func": "var arr = [];\nvar mean=0;\nvar sum=0;\n\narr = Object.keys(msg).map(function(key) {\n    return msg[key]\n    })\narr.splice(-1,1)\n\nfor(var i=0; i < arr.length ; i++){\n      sum = sum + arr[i];\n}\n// mean = sum / arr.length; \n\nmsg2 = new Object();\n//msg2.payload = (arr[0] + arr[1] + arr[2]) / arr.length; \n\nmsg2.payload = sum;\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "98f234a0.aa0bf8"
            ]
        ]
    },
    {
        "id": "f049a804.258328",
        "type": "debug",
        "z": "9c7c99c7.995708",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "36e28791.7a5b68",
        "type": "debug",
        "z": "9c7c99c7.995708",
        "name": "Last Power Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "7201784.0f96788",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "8c68dc9e.9ac75"
            ]
        ]
    },
    {
        "id": "8ead737f.5149a",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "count",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "cd77a88a.279978",
        "type": "link in",
        "z": "e4c3246f.202c48",
        "name": "input_raw_data",
        "links": [
            "106c19f1.e407c6",
            "36f30d2b.de5d52"
        ],
        "x": 35,
        "y": 160,
        "wires": [
            [
                "37354fc9.2eed6"
            ]
        ]
    },
    {
        "id": "70fa3666.d09e58",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "8ead737f.5149a",
                "3247d483.d6e11c"
            ]
        ]
    },
    {
        "id": "3394f7e.65e5408",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "COUNT",
        "func": "msgQueryCount = {}\nmsgQueryCount.measurement = msg.measurement\nmsgQueryCount.query = 'SELECT COUNT(\"value\") FROM ' + msg.measurement\nreturn msgQueryCount;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "70fa3666.d09e58"
            ]
        ]
    },
    {
        "id": "3247d483.d6e11c",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "GET_LAST_ENTRIES",
        "func": "msgQueryGet = {}\nmsgQueryGet.measurement = msg.measurement\nif (msg.payload[0].count >= 50) {\n    msgQueryGet.query = 'SELECT * FROM ' + msg.measurement + ' ORDER BY time DESC limit 50'\n\n    return msgQueryGet;\n}\n\nelse {return }\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "7201784.0f96788"
            ]
        ]
    },
    {
        "id": "f13cf180.93a8a",
        "type": "comment",
        "z": "e4c3246f.202c48",
        "name": "### check if measurement has enough entries and get last 5 values if true",
        "info": "",
        "x": 320,
        "y": 20,
        "wires": []
    },
    {
        "id": "8c68dc9e.9ac75",
        "type": "json",
        "z": "e4c3246f.202c48",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "e1d2c739.2bd688",
                "8aabb7dd.15ef68"
            ]
        ]
    },
    {
        "id": "e1d2c739.2bd688",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "response_get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "af62a986.01a6d8",
        "type": "comment",
        "z": "e4c3246f.202c48",
        "name": "PowerDrive1 and PowerDrive2 last 50 entries",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "edf4bf46.9bf85",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "3f455e78.d58632"
            ]
        ]
    },
    {
        "id": "238bbec3.178722",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "fb92426b.deb77",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM voltagedrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "1e5c138d.6caa0c"
            ]
        ]
    },
    {
        "id": "1e5c138d.6caa0c",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "GET_LAST_ENTRIES",
        "func": "// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'voltagedrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM voltagedrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 400,
        "wires": [
            [
                "edf4bf46.9bf85"
            ]
        ]
    },
    {
        "id": "43ab874d.879d08",
        "type": "mqtt out",
        "z": "e4c3246f.202c48",
        "name": "Mean",
        "topic": "Mean",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "fc5aa743.5de028",
        "type": "comment",
        "z": "e4c3246f.202c48",
        "name": "VoltageDrive3 dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "b947a00d.b477e",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "3f455e78.d58632"
            ]
        ]
    },
    {
        "id": "3a9ee8ff.ccfb38",
        "type": "influxdb in",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM currentdrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "e77c42c9.631b7"
            ]
        ]
    },
    {
        "id": "e77c42c9.631b7",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "GET_LAST_ENTRIES",
        "func": "\n\n// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'currentdrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM currentdrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "b947a00d.b477e"
            ]
        ]
    },
    {
        "id": "347a75d3.fce7da",
        "type": "comment",
        "z": "e4c3246f.202c48",
        "name": "CurrentDrive3  dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "3f455e78.d58632",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "manual_join",
        "func": "var tempo_cd3_batch = context.get('cd3_batch')||[];\nvar tempo_vd3_batch = context.get('vd3_batch')||[];\n\nfunction build_analytics_object(){\n    data_obj = {\n        sample_number : msg.SampleNumber,\n        current_drive3_batch : tempo_cd3_batch,\n        voltage_drive3_batch : tempo_vd3_batch,\n    }\n    return data_obj\n}\n\n\nif (msg.measurement == 'currentdrive3'){\n    tempo_cd3_batch = msg.payload\n    context.set('cd3_batch',tempo_cd3_batch)\n    \n}\nelse if (msg.measurement == 'voltagedrive3') {\n    tempo_vd3_batch = msg.payload\n    context.set('vd3_batch',tempo_vd3_batch)\n}\n\nif (tempo_cd3_batch.length > 0 && tempo_vd3_batch.length >0 ) {\n    py_obj={}\n    py_obj.payload = build_analytics_object()\n    tempo_cd3_batch = []\n    tempo_vd3_batch = []\n    context.set('cd3_batch', tempo_cd3_batch)\n    context.set('vd3_batch', tempo_vd3_batch)\n    \n    return py_obj\n    \n}\n\nelse{\n    return\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "238bbec3.178722",
                "43ab874d.879d08"
            ]
        ]
    },
    {
        "id": "9395eb38.386778",
        "type": "mqtt in",
        "z": "e4c3246f.202c48",
        "name": "",
        "topic": "StandardKpiResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "6dfaf36b.e1685c",
                "9b289cc9.28f27"
            ]
        ]
    },
    {
        "id": "4bc8c5ce.e484cc",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "response standard kpis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "6dfaf36b.e1685c",
        "type": "json",
        "z": "e4c3246f.202c48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "90a9456d.a61848"
            ]
        ]
    },
    {
        "id": "90a9456d.a61848",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_standardkpis = {}\noutput_standardkpis.measurement = my_payload.name.toUpperCase() + '_STANDARD_KPIS'\noutput_standardkpis.payload = {\n    mean: Math.round(my_payload.mean_result * 1e2)/ 1e2,\n    median: Math.round(my_payload.median_result * 1e2)/ 1e2,\n    stddev: Math.round(my_payload.stddev_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_standardkpis;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 820,
        "wires": [
            [
                "2acc93b0.13e9ac",
                "4bc8c5ce.e484cc"
            ]
        ]
    },
    {
        "id": "2acc93b0.13e9ac",
        "type": "influxdb out",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "c52a9cfe.d9036",
        "type": "mqtt in",
        "z": "e4c3246f.202c48",
        "name": "",
        "topic": "MeanResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "740e2b17.a16a34",
                "ffd354c2.901dc8"
            ]
        ]
    },
    {
        "id": "31e83da.eed80c2",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "response mean",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 920,
        "wires": []
    },
    {
        "id": "740e2b17.a16a34",
        "type": "json",
        "z": "e4c3246f.202c48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "5f86391.c8242c8"
            ]
        ]
    },
    {
        "id": "5f86391.c8242c8",
        "type": "function",
        "z": "e4c3246f.202c48",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_pd1_mean = {}\noutput_pd1_mean.measurement = my_payload.name.toUpperCase()\noutput_pd1_mean.payload = {\n    value: Math.round(my_payload.power_mean_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_pd1_mean;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 960,
        "wires": [
            [
                "faf69116.06cc4",
                "31e83da.eed80c2"
            ]
        ]
    },
    {
        "id": "faf69116.06cc4",
        "type": "influxdb out",
        "z": "e4c3246f.202c48",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "5bc7ff6.60291",
        "type": "comment",
        "z": "e4c3246f.202c48",
        "name": "Data Analytics Results",
        "info": "",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "9b289cc9.28f27",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 780,
        "wires": []
    },
    {
        "id": "ffd354c2.901dc8",
        "type": "debug",
        "z": "e4c3246f.202c48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 920,
        "wires": []
    },
    {
        "id": "8aabb7dd.15ef68",
        "type": "mqtt out",
        "z": "e4c3246f.202c48",
        "name": "StandardKpis",
        "topic": "StandardKpis",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1220,
        "y": 160,
        "wires": []
    },
    {
        "id": "36f30d2b.de5d52",
        "type": "link out",
        "z": "36f57d21.a8d9a2",
        "name": "data_gen",
        "links": [
            "cd77a88a.279978",
            "fcb0f940.8676b8"
        ],
        "x": 1335,
        "y": 400,
        "wires": []
    },
    {
        "id": "5e7d24e4.1ae09c",
        "type": "mqtt in",
        "z": "36f57d21.a8d9a2",
        "name": "FA_Drives-Data source",
        "topic": "ie/d/j/simatic/v1/s7c1/dp/r/FA_Drives/default",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "4616e87.5990c18"
            ]
        ]
    },
    {
        "id": "4616e87.5990c18",
        "type": "function",
        "z": "36f57d21.a8d9a2",
        "name": "Convert S7 Connecor JSON to InfluxDB JSON",
        "func": "var id2NameMap = global.get(\"id2NameMap\")\nvar id2DataTypeMap = global.get(\"id2DataTypeMap\")\n\nmsgoutput={}\n\nlet bulk = JSON.parse(msg.payload);\n//node.warn(bulk)\nmsgoutput.payload = new Array(bulk.vals.size);\n\nfor (var i = 0; i < bulk.vals.length; i++) {\n    record = bulk.vals[i]\n\n    msgoutput.payload[i] = {\n        measurement: id2NameMap.get(record.id),\n        fields: {\n            value: Math.round(record.val * 1e2)/ 1e2,\n            name: id2NameMap.get(record.id),\n            qualitycode: false\n        },\n        timestamp: new Date(record.ts)\n    }\n    \n}\n\nreturn msgoutput;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "c654ee6a.5b8b8",
                "c89159b.fae1ba8",
                "ee8f2522.f45718"
            ]
        ]
    },
    {
        "id": "bb5cc7c2.c5e488",
        "type": "comment",
        "z": "36f57d21.a8d9a2",
        "name": "### Map variable id to variable name so that it is human readable ###",
        "info": "",
        "x": 370,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd2b4a84.304d98",
        "type": "mqtt in",
        "z": "36f57d21.a8d9a2",
        "name": "",
        "topic": "ie/m/j/simatic/v1/s7c1/dp",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 270,
        "y": 100,
        "wires": [
            [
                "e53d0b46.b00cf8",
                "f41a49d8.23ee08"
            ]
        ]
    },
    {
        "id": "e53d0b46.b00cf8",
        "type": "function",
        "z": "36f57d21.a8d9a2",
        "name": "Configuration Mapping",
        "func": "var id2NameMap = global.get(\"id2NameMap\")\nvar id2DataTypeMap = global.get(\"id2DataTypeMap\")\n\nif(id2NameMap == undefined || id2DataTypeMap == undefined ){\n    id2NameMap = new Map(); \n    id2DataTypeMap = new Map(); \n}\n\nlet connectionName = \"FA_Drives\"; // Name of the connection\n\n\nlet m = JSON.parse(msg.payload);\n\n\n// Mapping ID -> Variable Name\n// Mapping ID -> Variable Data Type\nm.connections.forEach(connection => \n{\n    if(connection.name == connectionName) {\n        let datapointobjects = connection.dataPoints;\n        \n        datapointobjects.forEach( datapoint => {\n            datapoint.dataPointDefinitions.forEach( definition => {\n                id2NameMap.set(definition.id, definition.name) // Mapping ID -> Variable Name\n                id2DataTypeMap.set(definition.id, definition.dataType) // Mapping ID -> Variable Data Type \n            })\n           \n        })\n    }\n    \n})\n\nglobal.set(\"id2NameMap\", id2NameMap)\nglobal.set(\"id2DataTypeMap\", id2DataTypeMap)\n\nmsg.payload = id2NameMap\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 140,
        "wires": [
            [
                "f41a49d8.23ee08"
            ]
        ]
    },
    {
        "id": "f41a49d8.23ee08",
        "type": "debug",
        "z": "36f57d21.a8d9a2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "75e2e2d.eb6a01c",
        "type": "comment",
        "z": "36f57d21.a8d9a2",
        "name": "### Retrieve data from S7 connector and replace variable ID with variable Name and puslish as Array ###",
        "info": "",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "c654ee6a.5b8b8",
        "type": "debug",
        "z": "36f57d21.a8d9a2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "c89159b.fae1ba8",
        "type": "influxdb batch",
        "z": "36f57d21.a8d9a2",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_to_influxdb",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1020,
        "y": 340,
        "wires": []
    },
    {
        "id": "37354fc9.2eed6",
        "type": "switch",
        "z": "e4c3246f.202c48",
        "name": "filter",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "powerdrive1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerdrive2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltagedrive3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "currentdrive3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "3394f7e.65e5408"
            ],
            [
                "3394f7e.65e5408"
            ],
            [
                "fb92426b.deb77"
            ],
            [
                "3a9ee8ff.ccfb38"
            ]
        ]
    },
    {
        "id": "ee8f2522.f45718",
        "type": "split",
        "z": "36f57d21.a8d9a2",
        "name": "Split S7 Array",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1000,
        "y": 400,
        "wires": [
            [
                "bc1f14ce.454208"
            ]
        ]
    },
    {
        "id": "bc1f14ce.454208",
        "type": "function",
        "z": "36f57d21.a8d9a2",
        "name": "Split formatting",
        "func": "var msgoutput = msg.payload\nreturn msgoutput;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1200,
        "y": 400,
        "wires": [
            [
                "36f30d2b.de5d52"
            ]
        ]
    }
]