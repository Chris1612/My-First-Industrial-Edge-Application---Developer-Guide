[
    {
        "id": "844b09ed.8e4a28",
        "type": "tab",
        "label": "Data Collection",
        "disabled": false,
        "info": ""
    },
    {
        "id": "636ba96f.54a21",
        "type": "tab",
        "label": "KPI-Calc-Dummy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d62e415b.14096",
        "type": "tab",
        "label": "KPI Estimation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ab7e97a.bda1e7",
        "type": "mqtt-broker",
        "z": "",
        "name": "Databus",
        "broker": "ie_databus",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "d75cd8f0.f1bcf8",
        "type": "OpcUa-Endpoint",
        "z": "",
        "endpoint": "opc.tcp://opc-server:4841",
        "secpol": "Basic256",
        "secmode": "SIGN",
        "login": true
    },
    {
        "id": "23dc6d97.ff346a",
        "type": "OpcUa-Endpoint",
        "z": "",
        "endpoint": "opc.tcp://172.17.0.1:4841",
        "secpol": "Basic256",
        "secmode": "SIGNANDENCRYPT",
        "login": true
    },
    {
        "id": "30c0e1a4.185f76",
        "type": "OpcUa-Endpoint",
        "z": "",
        "endpoint": "opc.tcp://ServiceName:Port",
        "secpol": "None",
        "secmode": "NONE",
        "login": false
    },
    {
        "id": "3e6912e1.eda84e",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "edgedb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "24f42f18.468a",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "986cf005.d467e",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "275dc0b6.b07c1",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "8df05cec.36f8a8",
        "type": "influxdb",
        "hostname": "influx",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "f0764f8.29ec3b",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "79ce44a7.31ae44",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "f8738841.64ea18",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "1a718d46.199d13",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "8b9f8de3.4bc1d8",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "4879590b.555638",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "6c3b2345.1c302c",
        "type": "influxdb",
        "hostname": "influx",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "a80b7fca.20df5",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "Acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "18647a80.cb9b0e",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "5d873a60.0a8cc4",
        "type": "influxdb",
        "hostname": "172.17.0.3",
        "port": "8086",
        "protocol": "http",
        "database": "acq",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "27f466e.564bf1a",
        "type": "comment",
        "z": "636ba96f.54a21",
        "name": "Calculate Total Power Consumption",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "772f5bbe.2927ec",
        "type": "function",
        "z": "636ba96f.54a21",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive1 where \"+a+\"='powerdrive1'\"\nreturn msg; \n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "309958d4.80e488"
            ]
        ]
    },
    {
        "id": "4d09a15d.d9e2",
        "type": "function",
        "z": "636ba96f.54a21",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive2 where \"+a+\"='powerdrive2'\"\nreturn msg; \n\n\n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "34668a99.2936e6"
            ]
        ]
    },
    {
        "id": "34668a99.2936e6",
        "type": "influxdb in",
        "z": "636ba96f.54a21",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power2",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "97a7f0be.62d7"
            ]
        ]
    },
    {
        "id": "97a7f0be.62d7",
        "type": "function",
        "z": "636ba96f.54a21",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nswitch (msg.payload[msg.payload.length-1].name) \n{\n    case \"powerdrive1\":\n        context.data.power1 = msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    case \"powerdrive2\":\n        context.data.power2= msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    default:\n        msg = null;\n    \tbreak;\n}\n\nif(context.data.power1 !== null && context.data.power2 !== null) \n{\n\tmsg2 = {};\n    msg2 = context.data;\n\n    context.data=null;\n\treturn msg2;\n} \nelse\n{\n    \n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "d87b9891.7204e",
                "bd6a8898.fd7aa"
            ]
        ]
    },
    {
        "id": "261a9dae.eb5232",
        "type": "function",
        "z": "636ba96f.54a21",
        "name": "join_and_write_power_Influxdb",
        "func": "total = msg.payload;\n\n\n    Beta = [{\n        measurement: \"GEN_KPI_TotalPower\",\n        fields:{\n            name: \"TotalPower\",\n            value:total,\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "5f2f3560.aed71c",
                "6d5aa8d5.c8d078"
            ]
        ]
    },
    {
        "id": "6d5aa8d5.c8d078",
        "type": "influxdb batch",
        "z": "636ba96f.54a21",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "x": 1520,
        "y": 180,
        "wires": []
    },
    {
        "id": "309958d4.80e488",
        "type": "influxdb in",
        "z": "636ba96f.54a21",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "97a7f0be.62d7"
            ]
        ]
    },
    {
        "id": "bab7323e.76e2b",
        "type": "comment",
        "z": "844b09ed.8e4a28",
        "name": "### Generate dummy data  and storage in influxdb ###",
        "info": "",
        "x": 320,
        "y": 700,
        "wires": []
    },
    {
        "id": "709e0daf.499b2c",
        "type": "link in",
        "z": "636ba96f.54a21",
        "name": "",
        "links": [
            "3e5dc939.97a5b6",
            "ac2bfcf6.795f8"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "772f5bbe.2927ec",
                "4d09a15d.d9e2"
            ]
        ]
    },
    {
        "id": "d87b9891.7204e",
        "type": "function",
        "z": "636ba96f.54a21",
        "name": "sum_total_power",
        "func": "var arr = [];\nvar mean=0;\nvar sum=0;\n\narr = Object.keys(msg).map(function(key) {\n    return msg[key]\n    })\narr.splice(-1,1)\n\nfor(var i=0; i < arr.length ; i++){\n      sum = sum + arr[i];\n}\n// mean = sum / arr.length; \n\nmsg2 = new Object();\n//msg2.payload = (arr[0] + arr[1] + arr[2]) / arr.length; \n\nmsg2.payload = sum;\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "261a9dae.eb5232"
            ]
        ]
    },
    {
        "id": "5f2f3560.aed71c",
        "type": "debug",
        "z": "636ba96f.54a21",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "bd6a8898.fd7aa",
        "type": "debug",
        "z": "636ba96f.54a21",
        "name": "Last Power Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "312b0c94.ec5ffc",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "44891320.efcc74"
            ]
        ]
    },
    {
        "id": "c4de64a3.60134",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "count",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "ba9e8da2.80f8e8",
        "type": "link in",
        "z": "d62e415b.14096",
        "name": "input_raw_data",
        "links": [
            "ac2bfcf6.795f8"
        ],
        "x": 55,
        "y": 160,
        "wires": [
            [
                "8ffb6577.2f768"
            ]
        ]
    },
    {
        "id": "2675661b.ba4b02",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "c4de64a3.60134",
                "28cf9c4.a6657e4"
            ]
        ]
    },
    {
        "id": "3b8caf45.65c3e",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "COUNT",
        "func": "msgQueryCount = {}\nmsgQueryCount.measurement = msg.payload[0].measurement\nmsgQueryCount.query = 'SELECT COUNT(\"value\") FROM ' + msg.payload[0].measurement\n\nreturn msgQueryCount;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "2675661b.ba4b02"
            ]
        ]
    },
    {
        "id": "28cf9c4.a6657e4",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "GET_LAST_ENTRIES",
        "func": "msgQueryGet = {}\nmsgQueryGet.measurement = msg.measurement\nif (msg.payload[0].count >= 50) {\n    msgQueryGet.query = 'SELECT * FROM ' + msg.measurement + ' ORDER BY time DESC limit 50'\n\n    return msgQueryGet;\n}\n\nelse {return }\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "312b0c94.ec5ffc"
            ]
        ]
    },
    {
        "id": "26d70546.6945a2",
        "type": "comment",
        "z": "d62e415b.14096",
        "name": "### check if measurement has enough entries and get last 5 values if true",
        "info": "",
        "x": 320,
        "y": 20,
        "wires": []
    },
    {
        "id": "44891320.efcc74",
        "type": "json",
        "z": "d62e415b.14096",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "6e99221e.07522c",
                "4e2489a.3c82a78"
            ]
        ]
    },
    {
        "id": "6e99221e.07522c",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "response_get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "ba6fe9c8.e90ad",
        "type": "comment",
        "z": "d62e415b.14096",
        "name": "PowerDrive1 and PowerDrive2 last 50 entries",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d21e5e2.95ce12",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "3750c556.d9f2d2"
            ]
        ]
    },
    {
        "id": "87a4b564.77f2a",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "3a9132f3.0dd94e",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM voltagedrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "83a8bc4f.67fb78"
            ]
        ]
    },
    {
        "id": "83a8bc4f.67fb78",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "GET_LAST_ENTRIES",
        "func": "// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'voltagedrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM voltagedrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 400,
        "wires": [
            [
                "3d21e5e2.95ce12"
            ]
        ]
    },
    {
        "id": "c17551a2.88fda8",
        "type": "mqtt out",
        "z": "d62e415b.14096",
        "name": "Mean",
        "topic": "Mean",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "163ba0ad.36ffdf",
        "type": "comment",
        "z": "d62e415b.14096",
        "name": "VoltageDrive3 dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "24f8f96a.60c74e",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "3750c556.d9f2d2"
            ]
        ]
    },
    {
        "id": "45115505.303894",
        "type": "influxdb in",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM currentdrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "75feb818.ba5448"
            ]
        ]
    },
    {
        "id": "75feb818.ba5448",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "GET_LAST_ENTRIES",
        "func": "\n\n// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'currentdrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM currentdrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "24f8f96a.60c74e"
            ]
        ]
    },
    {
        "id": "af29b896.045bd",
        "type": "comment",
        "z": "d62e415b.14096",
        "name": "CurrentDrive3  dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "8ffb6577.2f768",
        "type": "switch",
        "z": "d62e415b.14096",
        "name": "filter",
        "property": "payload[0].measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "powerdrive1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerdrive2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltagedrive3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "currentdrive3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "3b8caf45.65c3e"
            ],
            [
                "3b8caf45.65c3e"
            ],
            [
                "3a9132f3.0dd94e"
            ],
            [
                "45115505.303894"
            ]
        ]
    },
    {
        "id": "3750c556.d9f2d2",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "manual_join",
        "func": "var tempo_cd3_batch = context.get('cd3_batch')||[];\nvar tempo_vd3_batch = context.get('vd3_batch')||[];\n\nfunction build_analytics_object(){\n    data_obj = {\n        sample_number : msg.SampleNumber,\n        current_drive3_batch : tempo_cd3_batch,\n        voltage_drive3_batch : tempo_vd3_batch,\n    }\n    return data_obj\n}\n\n\nif (msg.measurement == 'currentdrive3'){\n    tempo_cd3_batch = msg.payload\n    context.set('cd3_batch',tempo_cd3_batch)\n    \n}\nelse if (msg.measurement == 'voltagedrive3') {\n    tempo_vd3_batch = msg.payload\n    context.set('vd3_batch',tempo_vd3_batch)\n}\n\nif (tempo_cd3_batch.length > 0 && tempo_vd3_batch.length >0 ) {\n    py_obj={}\n    py_obj.payload = build_analytics_object()\n    tempo_cd3_batch = []\n    tempo_vd3_batch = []\n    context.set('cd3_batch', tempo_cd3_batch)\n    context.set('vd3_batch', tempo_vd3_batch)\n    \n    return py_obj\n    \n}\n\nelse{\n    return\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "87a4b564.77f2a",
                "c17551a2.88fda8"
            ]
        ]
    },
    {
        "id": "620df342.d35bf4",
        "type": "mqtt in",
        "z": "d62e415b.14096",
        "name": "",
        "topic": "StandardKpiResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "bffe0621.3ea488",
                "ed23db1.d4a4aa8"
            ]
        ]
    },
    {
        "id": "bf8dc2ad.6ae898",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "response standard kpis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "bffe0621.3ea488",
        "type": "json",
        "z": "d62e415b.14096",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "2daf73e6.3581f4"
            ]
        ]
    },
    {
        "id": "2daf73e6.3581f4",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_standardkpis = {}\noutput_standardkpis.measurement = my_payload.name.toUpperCase() + '_STANDARD_KPIS'\noutput_standardkpis.payload = {\n    mean: Math.round(my_payload.mean_result * 1e2)/ 1e2,\n    median: Math.round(my_payload.median_result * 1e2)/ 1e2,\n    stddev: Math.round(my_payload.stddev_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_standardkpis;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 820,
        "wires": [
            [
                "7cdf2632.75b998",
                "bf8dc2ad.6ae898"
            ]
        ]
    },
    {
        "id": "7cdf2632.75b998",
        "type": "influxdb out",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "55430907.faf0b8",
        "type": "mqtt in",
        "z": "d62e415b.14096",
        "name": "",
        "topic": "MeanResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "36722c89.b4ef44",
                "810cd23f.99e758"
            ]
        ]
    },
    {
        "id": "10478aba.bffadd",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "response mean",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 920,
        "wires": []
    },
    {
        "id": "36722c89.b4ef44",
        "type": "json",
        "z": "d62e415b.14096",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "863b357c.fa6248"
            ]
        ]
    },
    {
        "id": "863b357c.fa6248",
        "type": "function",
        "z": "d62e415b.14096",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_pd1_mean = {}\noutput_pd1_mean.measurement = my_payload.name.toUpperCase()\noutput_pd1_mean.payload = {\n    value: Math.round(my_payload.power_mean_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_pd1_mean;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 960,
        "wires": [
            [
                "185e896d.7f4347",
                "10478aba.bffadd"
            ]
        ]
    },
    {
        "id": "185e896d.7f4347",
        "type": "influxdb out",
        "z": "d62e415b.14096",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "cf807cda.94826",
        "type": "comment",
        "z": "d62e415b.14096",
        "name": "Data Analytics Results",
        "info": "",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "7f8f536e.b16304",
        "type": "inject",
        "z": "844b09ed.8e4a28",
        "name": "n-samples",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "samples_number_n",
        "payload": "20",
        "payloadType": "num",
        "x": 250,
        "y": 940,
        "wires": [
            [
                "8664b354.594f8",
                "c7f7e416.d47c08",
                "e97e825d.007348",
                "40e2ad02.e39794"
            ]
        ]
    },
    {
        "id": "40e2ad02.e39794",
        "type": "function",
        "z": "844b09ed.8e4a28",
        "name": "Write_KPI_PowerDrive1_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n\n        measurement: \"powerdrive1\",\n        fields:{\n            name: \"powerdrive1\",\n            value:(Math.random() * (999.0 - 750.0 + 1) + 750.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 860,
        "wires": [
            [
                "7cfa57d2.056e28",
                "e53ff78c.1c83a",
                "ac2bfcf6.795f8"
            ]
        ]
    },
    {
        "id": "8664b354.594f8",
        "type": "function",
        "z": "844b09ed.8e4a28",
        "name": "Write_KPI_PowerDrive2_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 800 and 999 Watt\n        measurement: \"powerdrive2\",\n        fields:{\n            name: \"powerdrive2\",\n            value:(Math.random() * (999.0 - 800.0 + 1) + 800.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 920,
        "wires": [
            [
                "5ad2d081.dabd18",
                "e53ff78c.1c83a",
                "ac2bfcf6.795f8"
            ]
        ]
    },
    {
        "id": "c7f7e416.d47c08",
        "type": "function",
        "z": "844b09ed.8e4a28",
        "name": "Write_KPI_VoltageDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 48 and 50 Volt\n        measurement: \"voltagedrive3\",\n        fields:{\n            name: \"voltagedrive3\",\n            value:(Math.random() * (50.0 - 48.0) + 48.0),\n            qualitycode: false\n            \n        },\n        ttimestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 980,
        "wires": [
            [
                "e53ff78c.1c83a",
                "c59242dd.4fd6f",
                "ac2bfcf6.795f8"
            ]
        ]
    },
    {
        "id": "e97e825d.007348",
        "type": "function",
        "z": "844b09ed.8e4a28",
        "name": "Write_KPI_CurrentDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 18 and 20 Ampere\n        measurement: \"currentdrive3\",\n        fields:{\n            name: \"currentdrive3\",\n            value:(Math.random() * (20.0 - 18.0) + 18.0),\n            qualitycode: false\n            \n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 1040,
        "wires": [
            [
                "e53ff78c.1c83a",
                "ac740504.c57958",
                "ac2bfcf6.795f8"
            ]
        ]
    },
    {
        "id": "e53ff78c.1c83a",
        "type": "influxdb batch",
        "z": "844b09ed.8e4a28",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_influxdb",
        "x": 990,
        "y": 940,
        "wires": []
    },
    {
        "id": "ac2bfcf6.795f8",
        "type": "link out",
        "z": "844b09ed.8e4a28",
        "name": "data_gen",
        "links": [
            "ba9e8da2.80f8e8",
            "709e0daf.499b2c"
        ],
        "x": 915,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7cfa57d2.056e28",
        "type": "debug",
        "z": "844b09ed.8e4a28",
        "name": "KPI-Result_PowerDrive1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1010,
        "y": 860,
        "wires": []
    },
    {
        "id": "5ad2d081.dabd18",
        "type": "debug",
        "z": "844b09ed.8e4a28",
        "name": "KPI-Result_PowerDrive2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1010,
        "y": 900,
        "wires": []
    },
    {
        "id": "c59242dd.4fd6f",
        "type": "debug",
        "z": "844b09ed.8e4a28",
        "name": "KPI-Result_VoltageDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ac740504.c57958",
        "type": "debug",
        "z": "844b09ed.8e4a28",
        "name": "KPI-Result_CurrentDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ed23db1.d4a4aa8",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 780,
        "wires": []
    },
    {
        "id": "810cd23f.99e758",
        "type": "debug",
        "z": "d62e415b.14096",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 920,
        "wires": []
    },
    {
        "id": "4e2489a.3c82a78",
        "type": "mqtt out",
        "z": "d62e415b.14096",
        "name": "StandardKpis",
        "topic": "StandardKpis",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1220,
        "y": 160,
        "wires": []
    }
]